
EXTI_Driver_.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e6c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc8  08000fd0  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000000  08000fd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08000fd0  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d13  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b3d  00000000  00000000  00014d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c10  00000000  00000000  00015849  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00016460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00016688  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003dc5  00000000  00000000  00016858  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002175  00000000  00000000  0001a61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010462  00000000  00000000  0001c792  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007f  00000000  00000000  0002cbf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b8  00000000  00000000  0002cc74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f84 	.word	0x08000f84

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f84 	.word	0x08000f84

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:

unsigned char SystickLED;


void HardFault_Handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void	MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:

}
void	BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:

}
void	UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:

__attribute ((naked)) void SVC_Handler() // to make this function not take size at stack

{

	__asm("tst lr,#4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bab5 	b.w	80007b0 <OS_SVC_services>
			"ITE EQ \n\t"
			"mrseq r0,msp \n\t"
			"mrsne r0,psp \n\t"
			"B OS_SVC_services");

}
 8000246:	bf00      	nop

08000248 <HW_init>:

void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	systick inside cpu then it operate on 8MHZ

	//decrease pendsv interrupt priority to be smaller than or equal systimer
	//systick have a priority 14

	__NVIC_SetPriority(PendSV_IRQn,15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |=SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <start_ticker>:


void start_ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 8 MHZ
	// 1 count -> 0.125 us
	// x count -> 1ms
	// X =8000 count

	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SystickLED ^=1;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]
	MYRTOS_Uptade_TasksWaitingTime(); // that is mean when sys time happened it will update any tasks on waiting mode
 800029a:	f000 fc11 	bl	8000ac0 <MYRTOS_Uptade_TasksWaitingTime>
	// determine Pcurrent & Pnext

	Decide_WhatNext();
 800029e:	f000 f959 	bl	8000554 <Decide_WhatNext>
	// switch Context & Restore
	trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <trigger_OS_PendSV>

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000020 	.word	0x20000020

080002b0 <FIFO_Init>:

#include "MYRTOS._FIFO.h"


Buffer_status FIFO_Init(FIFO_Buf_t* fifo , element_type* buff , unsigned int length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if(!buff)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_Init+0x16>
		return FIFO_NULL ;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_Init+0x3a>


	fifo->base = buff;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter = 0 ;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

Buffer_status FIFO_enqueue(FIFO_Buf_t* fifo , element_type item)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	if(!fifo->base || !fifo->length )
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>


	if ((fifo->head == fifo->tail)&&(fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail) = item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter ++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
	//circular fifo


	if(fifo->tail == (((unsigned int)fifo->base + (4*fifo->length))-4))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>

		fifo->tail = fifo->base ;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>

	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR ;
 800036c:	2300      	movs	r3, #0

}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:

Buffer_status FIFO_dequeue(FIFO_Buf_t* fifo , element_type* item)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	if(!fifo->base || !fifo->length )
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
			return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	//check fifo is empty
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
			return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>


	*item = *(fifo->head) ;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]

	//circular fifo

	if(fifo->head == (((unsigned int)fifo->base + (4*fifo->length))-4))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base ;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>

	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR ;
 80003e6:	2300      	movs	r3, #0

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <bubble_Sort>:

}OS_Control; // it is the one structure with one variable of structure

void bubble_Sort()

{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
	unsigned int i ,j,n ;
	Task_ref* temp;
	n=OS_Control.No_Of_Active_Tasks;
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <bubble_Sort+0x8c>)
 80003fc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000400:	607b      	str	r3, [r7, #4]

	for(i=0	; i<n -1 ; i++)
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e030      	b.n	800046a <bubble_Sort+0x76>

		// last i elements are ready in place

		for(j=0 ; j<n - i - 1 ; j++)
 8000408:	2300      	movs	r3, #0
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	e023      	b.n	8000456 <bubble_Sort+0x62>

			if(OS_Control.OSTasks[j]->priority>OS_Control.OSTasks[j+1]->priority)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <bubble_Sort+0x8c>)
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	3301      	adds	r3, #1
 800041c:	4918      	ldr	r1, [pc, #96]	; (8000480 <bubble_Sort+0x8c>)
 800041e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	d913      	bls.n	8000450 <bubble_Sort+0x5c>
			{
				temp=OS_Control.OSTasks[j]; // that is mean to equal pointer to another pointer
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <bubble_Sort+0x8c>)
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j]=OS_Control.OSTasks[j+1];
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <bubble_Sort+0x8c>)
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4910      	ldr	r1, [pc, #64]	; (8000480 <bubble_Sort+0x8c>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1]=temp;
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	3301      	adds	r3, #1
 8000448:	490d      	ldr	r1, [pc, #52]	; (8000480 <bubble_Sort+0x8c>)
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0 ; j<n - i - 1 ; j++)
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3301      	adds	r3, #1
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	3b01      	subs	r3, #1
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3d4      	bcc.n	800040e <bubble_Sort+0x1a>
	for(i=0	; i<n -1 ; i++)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3b01      	subs	r3, #1
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3c9      	bcc.n	8000408 <bubble_Sort+0x14>
			}




}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000068 	.word	0x20000068

08000484 <MyRTOS_Update_Schedule_Tables>:

void MyRTOS_Update_Schedule_Tables()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

	Task_ref* temp=NULL ;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;

	int i=0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
	//Bubble sort scheduler for tasks to arrange the priority in sch-table OS.control->OStasks[100]
	bubble_Sort();
 8000492:	f7ff ffaf 	bl	80003f4 <bubble_Sort>

	// free ready Queue
	while(FIFO_dequeue(&Ready_QUEUE,&temp /*pointer to pointer */)!=FIFO_EMPTY);
 8000496:	bf00      	nop
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	482b      	ldr	r0, [pc, #172]	; (800054c <MyRTOS_Update_Schedule_Tables+0xc8>)
 800049e:	f7ff ff6b 	bl	8000378 <FIFO_dequeue>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d1f7      	bne.n	8000498 <MyRTOS_Update_Schedule_Tables+0x14>

	// update ready Queue (which is high in scheduler and put it in queue)
	while( i < OS_Control.No_Of_Active_Tasks )
 80004a8:	e044      	b.n	8000534 <MyRTOS_Update_Schedule_Tables+0xb0>
	{
		Ptask=OS_Control.OSTasks[i];
 80004aa:	4a29      	ldr	r2, [pc, #164]	; (8000550 <MyRTOS_Update_Schedule_Tables+0xcc>)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	60bb      	str	r3, [r7, #8]
		PnextTask=OS_Control.OSTasks[i+1];
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4a25      	ldr	r2, [pc, #148]	; (8000550 <MyRTOS_Update_Schedule_Tables+0xcc>)
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	607b      	str	r3, [r7, #4]

		if (Ptask->TaskState!=suspend)
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d031      	beq.n	800052e <MyRTOS_Update_Schedule_Tables+0xaa>
		{

			// in case we reached to the end of available OS_STACKS
			if (PnextTask->TaskState==suspend)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d108      	bne.n	80004e6 <MyRTOS_Update_Schedule_Tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	481d      	ldr	r0, [pc, #116]	; (800054c <MyRTOS_Update_Schedule_Tables+0xc8>)
 80004d8:	f7ff ff0c 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState=Ready;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2203      	movs	r2, #3
 80004e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 80004e4:	e02e      	b.n	8000544 <MyRTOS_Update_Schedule_Tables+0xc0>
			}

			// if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d208      	bcs.n	8000504 <MyRTOS_Update_Schedule_Tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <MyRTOS_Update_Schedule_Tables+0xc8>)
 80004f6:	f7ff fefd 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState=Ready;
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	2203      	movs	r2, #3
 80004fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000502:	e01f      	b.n	8000544 <MyRTOS_Update_Schedule_Tables+0xc0>

			}

			else if (Ptask->priority == PnextTask->priority)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	685a      	ldr	r2, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	d108      	bne.n	8000522 <MyRTOS_Update_Schedule_Tables+0x9e>

				// if the Ptask priority == nexttask then
				// push ptask to ready state
				// and make the ptask = nexttask and nexttask ++

				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000510:	68b9      	ldr	r1, [r7, #8]
 8000512:	480e      	ldr	r0, [pc, #56]	; (800054c <MyRTOS_Update_Schedule_Tables+0xc8>)
 8000514:	f7ff feee 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState=Ready;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	2203      	movs	r2, #3
 800051c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000520:	e005      	b.n	800052e <MyRTOS_Update_Schedule_Tables+0xaa>

			}
			else if (Ptask->priority > PnextTask->priority)
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	d809      	bhi.n	8000542 <MyRTOS_Update_Schedule_Tables+0xbe>
				break;
			}

		}

		i++;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
	while( i < OS_Control.No_Of_Active_Tasks )
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MyRTOS_Update_Schedule_Tables+0xcc>)
 8000536:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8b4      	bhi.n	80004aa <MyRTOS_Update_Schedule_Tables+0x26>
	}

}
 8000540:	e000      	b.n	8000544 <MyRTOS_Update_Schedule_Tables+0xc0>
				break;
 8000542:	bf00      	nop
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000214 	.word	0x20000214
 8000550:	20000068 	.word	0x20000068

08000554 <Decide_WhatNext>:

//Handler
void Decide_WhatNext()

{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// if ready Queue is empty && OS_Control -> current task -> !=0  because it may be the current task at running mode and not in queue then u can't run the idle task
	if (Ready_QUEUE.counter ==0 && OS_Control.CurrentTask->TaskState !=suspend) //Fifo _Empty
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <Decide_WhatNext+0x98>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d11a      	bne.n	8000596 <Decide_WhatNext+0x42>
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <Decide_WhatNext+0x9c>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800056a:	2b00      	cmp	r3, #0
 800056c:	d013      	beq.n	8000596 <Decide_WhatNext+0x42>
	{

		OS_Control.CurrentTask-> TaskState= Running;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <Decide_WhatNext+0x9c>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	2201      	movs	r2, #1
 8000576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		// add current task again at Queue to make (round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <Decide_WhatNext+0x9c>)
 800057c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <Decide_WhatNext+0x98>)
 8000584:	f7ff feb6 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask= OS_Control.CurrentTask;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <Decide_WhatNext+0x9c>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <Decide_WhatNext+0x9c>)
 8000590:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;

		}
	}
}
 8000594:	e027      	b.n	80005e6 <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE,&OS_Control.NextTask);
 8000596:	4917      	ldr	r1, [pc, #92]	; (80005f4 <Decide_WhatNext+0xa0>)
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <Decide_WhatNext+0x98>)
 800059a:	f7ff feed 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState=Running;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005a4:	2201      	movs	r2, #1
 80005a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority==OS_Control.NextTask->priority)&&(OS_Control.CurrentTask->TaskState!=suspend))
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d113      	bne.n	80005e6 <Decide_WhatNext+0x92>
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00c      	beq.n	80005e6 <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <Decide_WhatNext+0x98>)
 80005d6:	f7ff fe8d 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <Decide_WhatNext+0x9c>)
 80005dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e0:	2203      	movs	r2, #3
 80005e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000214 	.word	0x20000214
 80005f0:	20000068 	.word	0x20000068
 80005f4:	2000020c 	.word	0x2000020c

080005f8 <PendSV_Handler>:
	//==================================
	// save context of current task
	//==================================

	//Get the Current Task "Current PSP from CPU Register" as cpu pushed xpsr,pc,.........,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80005f8:	4b6c      	ldr	r3, [pc, #432]	; (80007ac <PendSV_Handler+0x1b4>)
 80005fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005fe:	f3ef 8009 	mrs	r0, PSP
 8000602:	4602      	mov	r2, r0
 8000604:	619a      	str	r2, [r3, #24]

	//using the PSP (as a pointer ) to store (r4 to r11)
	OS_Control.CurrentTask->Current_PSP--;
 8000606:	4b69      	ldr	r3, [pc, #420]	; (80007ac <PendSV_Handler+0x1b4>)
 8000608:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800060c:	699a      	ldr	r2, [r3, #24]
 800060e:	3a04      	subs	r2, #4
 8000610:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000612:	4b66      	ldr	r3, [pc, #408]	; (80007ac <PendSV_Handler+0x1b4>)
 8000614:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4622      	mov	r2, r4
 800061c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800061e:	4b63      	ldr	r3, [pc, #396]	; (80007ac <PendSV_Handler+0x1b4>)
 8000620:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	3a04      	subs	r2, #4
 8000628:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800062a:	4b60      	ldr	r3, [pc, #384]	; (80007ac <PendSV_Handler+0x1b4>)
 800062c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	462a      	mov	r2, r5
 8000634:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000636:	4b5d      	ldr	r3, [pc, #372]	; (80007ac <PendSV_Handler+0x1b4>)
 8000638:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	3a04      	subs	r2, #4
 8000640:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000642:	4b5a      	ldr	r3, [pc, #360]	; (80007ac <PendSV_Handler+0x1b4>)
 8000644:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4632      	mov	r2, r6
 800064c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800064e:	4b57      	ldr	r3, [pc, #348]	; (80007ac <PendSV_Handler+0x1b4>)
 8000650:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	3a04      	subs	r2, #4
 8000658:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800065a:	4b54      	ldr	r3, [pc, #336]	; (80007ac <PendSV_Handler+0x1b4>)
 800065c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	463a      	mov	r2, r7
 8000664:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000666:	4b51      	ldr	r3, [pc, #324]	; (80007ac <PendSV_Handler+0x1b4>)
 8000668:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	3a04      	subs	r2, #4
 8000670:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000672:	4b4e      	ldr	r3, [pc, #312]	; (80007ac <PendSV_Handler+0x1b4>)
 8000674:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4642      	mov	r2, r8
 800067c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800067e:	4b4b      	ldr	r3, [pc, #300]	; (80007ac <PendSV_Handler+0x1b4>)
 8000680:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	3a04      	subs	r2, #4
 8000688:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800068a:	4b48      	ldr	r3, [pc, #288]	; (80007ac <PendSV_Handler+0x1b4>)
 800068c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	464a      	mov	r2, r9
 8000694:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <PendSV_Handler+0x1b4>)
 8000698:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	3a04      	subs	r2, #4
 80006a0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80006a2:	4b42      	ldr	r3, [pc, #264]	; (80007ac <PendSV_Handler+0x1b4>)
 80006a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4652      	mov	r2, sl
 80006ac:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <PendSV_Handler+0x1b4>)
 80006b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	3a04      	subs	r2, #4
 80006b8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80006ba:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <PendSV_Handler+0x1b4>)
 80006bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	465a      	mov	r2, fp
 80006c4:	601a      	str	r2, [r3, #0]
	//========================
	// Restore context of Next task
	//========================
	//

	OS_Control.CurrentTask=OS_Control.NextTask; // that u has stacked it before in activation process with ( MYRTOS_Stack_for_Task ) function
 80006c6:	4b39      	ldr	r3, [pc, #228]	; (80007ac <PendSV_Handler+0x1b4>)
 80006c8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80006cc:	4a37      	ldr	r2, [pc, #220]	; (80007ac <PendSV_Handler+0x1b4>)
 80006ce:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask=NULL;
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <PendSV_Handler+0x1b4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4


	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <PendSV_Handler+0x1b4>)
 80006dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <PendSV_Handler+0x1b4>)
 80006e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	3204      	adds	r2, #4
 80006f0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <PendSV_Handler+0x1b4>)
 80006f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <PendSV_Handler+0x1b4>)
 8000700:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000704:	699a      	ldr	r2, [r3, #24]
 8000706:	3204      	adds	r2, #4
 8000708:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <PendSV_Handler+0x1b4>)
 800070c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <PendSV_Handler+0x1b4>)
 8000718:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	3204      	adds	r2, #4
 8000720:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <PendSV_Handler+0x1b4>)
 8000724:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <PendSV_Handler+0x1b4>)
 8000730:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	3204      	adds	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <PendSV_Handler+0x1b4>)
 800073c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <PendSV_Handler+0x1b4>)
 8000748:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	3204      	adds	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <PendSV_Handler+0x1b4>)
 8000754:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <PendSV_Handler+0x1b4>)
 8000760:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	3204      	adds	r2, #4
 8000768:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <PendSV_Handler+0x1b4>)
 800076c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <PendSV_Handler+0x1b4>)
 8000778:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	3204      	adds	r2, #4
 8000780:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r"  (*(OS_Control.CurrentTask->Current_PSP)) );
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <PendSV_Handler+0x1b4>)
 8000784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <PendSV_Handler+0x1b4>)
 8000790:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000794:	699a      	ldr	r2, [r3, #24]
 8000796:	3204      	adds	r2, #4
 8000798:	619a      	str	r2, [r3, #24]

	//update PSP and exit set the value of PSP in the
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <PendSV_Handler+0x1b4>)
 800079c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 80007a8:	4770      	bx	lr



}
 80007aa:	bf00      	nop
 80007ac:	20000068 	.word	0x20000068

080007b0 <OS_SVC_services>:


///Handler Mode
void OS_SVC_services (int* StackFramePointer)

{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set stack is r0,r1,r2,r3,r12,lr,pc,xpsr

	unsigned char svc_number;
	svc_number= *((unsigned char*)((unsigned char*)StackFramePointer[6]-2));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3318      	adds	r3, #24
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3b02      	subs	r3, #2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	73fb      	strb	r3, [r7, #15]
	switch (svc_number)
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db1f      	blt.n	800080a <OS_SVC_services+0x5a>
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	dd02      	ble.n	80007d4 <OS_SVC_services+0x24>
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d017      	beq.n	8000802 <OS_SVC_services+0x52>

		MyRTOS_Update_Schedule_Tables();
		break;
	}

}
 80007d2:	e01a      	b.n	800080a <OS_SVC_services+0x5a>
		MyRTOS_Update_Schedule_Tables();
 80007d4:	f7ff fe56 	bl	8000484 <MyRTOS_Update_Schedule_Tables>
		if (OS_Control.OSMode_ID==OSrunning)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <OS_SVC_services+0x64>)
 80007da:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d112      	bne.n	8000808 <OS_SVC_services+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName,"idleTask")!=0)
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <OS_SVC_services+0x64>)
 80007e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e8:	331c      	adds	r3, #28
 80007ea:	490b      	ldr	r1, [pc, #44]	; (8000818 <OS_SVC_services+0x68>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcbf 	bl	8000170 <strcmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <OS_SVC_services+0x58>
				Decide_WhatNext();
 80007f8:	f7ff feac 	bl	8000554 <Decide_WhatNext>
				trigger_OS_PendSV();
 80007fc:	f7ff fd2e 	bl	800025c <trigger_OS_PendSV>
		break;
 8000800:	e002      	b.n	8000808 <OS_SVC_services+0x58>
		MyRTOS_Update_Schedule_Tables();
 8000802:	f7ff fe3f 	bl	8000484 <MyRTOS_Update_Schedule_Tables>
		break;
 8000806:	e000      	b.n	800080a <OS_SVC_services+0x5a>
		break;
 8000808:	bf00      	nop
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000068 	.word	0x20000068
 8000818:	08000f9c 	.word	0x08000f9c

0800081c <MYRTOS_Operation>:

unsigned char IdleTaskLED;

void MYRTOS_Operation()
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

	while(1)
	{
		IdleTaskLED ^=1;
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <MYRTOS_Operation+0x18>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b02      	ldr	r3, [pc, #8]	; (8000834 <MYRTOS_Operation+0x18>)
 800082c:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800082e:	bf20      	wfe
		IdleTaskLED ^=1;
 8000830:	e7f6      	b.n	8000820 <MYRTOS_Operation+0x4>
 8000832:	bf00      	nop
 8000834:	20000228 	.word	0x20000228

08000838 <MYRTOS_CREAT_MAIN_STACK>:

}


void MYRTOS_CREAT_MAIN_STACK()
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MYRTOS_CREAT_MAIN_STACK+0x34>)
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MYRTOS_CREAT_MAIN_STACK+0x38>)
 8000840:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task	= OS_Control._S_MSP_Task-MainStackSize ; //MainStackSize is sized by own soc
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MYRTOS_CREAT_MAIN_STACK+0x38>)
 8000846:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800084a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <MYRTOS_CREAT_MAIN_STACK+0x38>)
 8000850:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	// Aligned 8 bytes spaces between Main Task and PSP tasks

	OS_Control.PSP_Task_locator = (OS_Control._E_MSP_Task-8);
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MYRTOS_CREAT_MAIN_STACK+0x38>)
 8000856:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800085a:	3b08      	subs	r3, #8
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <MYRTOS_CREAT_MAIN_STACK+0x38>)
 800085e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198




}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20002800 	.word	0x20002800
 8000870:	20000068 	.word	0x20000068

08000874 <MYRTOS_init>:

MYRTOS_ErrorID MYRTOS_init()

{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error = NOERROR;
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]

	//update OS Mode (OS_Suspend)

	OS_Control.OSMode_ID= OSsuspend;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MYRTOS_init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// specify the Main stack of OS
	MYRTOS_CREAT_MAIN_STACK();
 8000886:	f7ff ffd7 	bl	8000838 <MYRTOS_CREAT_MAIN_STACK>

	// Create OS Ready Queue
	if (FIFO_Init(&Ready_QUEUE,Ready_QUEUE_FIFO, 100)!=FIFO_NO_ERROR)
 800088a:	2264      	movs	r2, #100	; 0x64
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <MYRTOS_init+0x68>)
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MYRTOS_init+0x6c>)
 8000890:	f7ff fd0e 	bl	80002b0 <FIFO_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <MYRTOS_init+0x2c>
	{
		error+=Ready_QUEUE_init_Error;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	3301      	adds	r3, #1
 800089e:	71fb      	strb	r3, [r7, #7]
	}

	// Configure IDLE Task
	strcpy(IDLE_Task.TaskName,"idleTask");
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MYRTOS_init+0x70>)
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MYRTOS_init+0x74>)
 80008a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a6:	c303      	stmia	r3!, {r0, r1}
 80008a8:	701a      	strb	r2, [r3, #0]
	IDLE_Task.priority=255;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MYRTOS_init+0x78>)
 80008ac:	22ff      	movs	r2, #255	; 0xff
 80008ae:	605a      	str	r2, [r3, #4]
	IDLE_Task.P_TaskEntry=MYRTOS_Operation;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MYRTOS_init+0x78>)
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <MYRTOS_init+0x7c>)
 80008b4:	609a      	str	r2, [r3, #8]
	IDLE_Task.Stack_Size=300;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MYRTOS_init+0x78>)
 80008b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008bc:	601a      	str	r2, [r3, #0]

	error+=MYRTOS_CreatTask(&IDLE_Task); // (if there is error the function MYRTOS_CreatTask will return error with +1 above error which is eq 0 )
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <MYRTOS_init+0x78>)
 80008c0:	f000 f856 	bl	8000970 <MYRTOS_CreatTask>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4413      	add	r3, r2
 80008cc:	71fb      	strb	r3, [r7, #7]


	return error;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000068 	.word	0x20000068
 80008dc:	2000022c 	.word	0x2000022c
 80008e0:	20000214 	.word	0x20000214
 80008e4:	20000040 	.word	0x20000040
 80008e8:	08000f9c 	.word	0x08000f9c
 80008ec:	20000024 	.word	0x20000024
 80008f0:	0800081d 	.word	0x0800081d

080008f4 <MYRTOS_Stack_for_Task>:



void MYRTOS_Stack_for_Task(Task_ref* tref)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	 * r0
	 * ======
	 * r4,r5,r6,r7,r7,r8,r9,r10,r11 (saved/restored) Manually
	 */

	tref->Current_PSP =tref ->_S_PSP_Task;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	619a      	str	r2, [r3, #24]

	tref->Current_PSP--;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	1f1a      	subs	r2, r3, #4
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	619a      	str	r2, [r3, #24]
	*(tref->Current_PSP) =0x01000000;		 // XPSR saving then we decrement 4 byte by pointer to can put PC
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000918:	601a      	str	r2, [r3, #0]

	tref->Current_PSP--;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	1f1a      	subs	r2, r3, #4
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	619a      	str	r2, [r3, #24]
	*(tref->Current_PSP)=(unsigned int) tref->P_TaskEntry; 	// PC  (u need to know more about thAT )
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	601a      	str	r2, [r3, #0]

	tref->Current_PSP--;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	1f1a      	subs	r2, r3, #4
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	619a      	str	r2, [r3, #24]
	*(tref->Current_PSP) = 0xFFFFFFFD; 		//	LR which stored in stack that refer to that the task before handler stacked LR which refer to previous task
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f06f 0202 	mvn.w	r2, #2
 8000940:	601a      	str	r2, [r3, #0]

	for (int j=0 ;j<13;	j++)
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00b      	b.n	8000960 <MYRTOS_Stack_for_Task+0x6c>
	{
		tref->Current_PSP--;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	1f1a      	subs	r2, r3, #4
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	619a      	str	r2, [r3, #24]
		*(tref->Current_PSP)=0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
	for (int j=0 ;j<13;	j++)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b0c      	cmp	r3, #12
 8000964:	ddf0      	ble.n	8000948 <MYRTOS_Stack_for_Task+0x54>
	}

}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <MYRTOS_CreatTask>:


MYRTOS_ErrorID MYRTOS_CreatTask(Task_ref* tref)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

	MYRTOS_ErrorID error= NOERROR;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

	// create it's own psp stack
	tref->_S_PSP_Task= OS_Control.PSP_Task_locator;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 800097e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	611a      	str	r2, [r3, #16]
	tref->_E_PSP_Task= tref->_S_PSP_Task - tref->Stack_Size;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1ad2      	subs	r2, r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	615a      	str	r2, [r3, #20]

	// check task stack size exceed the psp stack
	if (tref->_E_PSP_Task < (unsigned int)(&(_end)))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MYRTOS_CreatTask+0x78>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d201      	bcs.n	80009a2 <MYRTOS_CreatTask+0x32>
	{
		return Task_exceeded_stackSize;
 800099e:	2302      	movs	r3, #2
 80009a0:	e01b      	b.n	80009da <MYRTOS_CreatTask+0x6a>
	}
	// aligned 8 bytes spaces between task PSP and other
	OS_Control.PSP_Task_locator=(tref->_E_PSP_Task-8);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	3b08      	subs	r3, #8
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 80009aa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// Initialize PSP task stack (the concept is for store the remaining general purpose registers like r4 to r11 which are not stacking when handling happens )
	MYRTOS_Stack_for_Task(tref);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffa0 	bl	80008f4 <MYRTOS_Stack_for_Task>

	// update sch table
	//tref->TimingWaiting.Blocking=disable;
	OS_Control.OSTasks[OS_Control.No_Of_Active_Tasks]=tref;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 80009b6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009ba:	490a      	ldr	r1, [pc, #40]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.No_Of_Active_Tasks++;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 80009c4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <MYRTOS_CreatTask+0x74>)
 80009cc:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	// task state update ->	suspend
	tref->TaskState=suspend;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a


	return error;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000068 	.word	0x20000068
 80009e8:	20000520 	.word	0x20000520

080009ec <MYRTOS_OS_SVC_Set>:



void MYRTOS_OS_SVC_Set(SVC_ID ID)

{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d006      	beq.n	8000a0a <MYRTOS_OS_SVC_Set+0x1e>
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d006      	beq.n	8000a0e <MYRTOS_OS_SVC_Set+0x22>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d000      	beq.n	8000a06 <MYRTOS_OS_SVC_Set+0x1a>

		break;

	}

}
 8000a04:	e005      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x00");
 8000a06:	df00      	svc	0
		break;
 8000a08:	e003      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x01");
 8000a0a:	df01      	svc	1
		break;
 8000a0c:	e001      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x02");
 8000a0e:	df02      	svc	2
		break;
 8000a10:	bf00      	nop
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask(Task_ref* tref)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	tref->TaskState=Waiting;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2202      	movs	r2, #2
 8000a28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ffdd 	bl	80009ec <MYRTOS_OS_SVC_Set>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <MYRTOS_TaskWait>:


}

void MYRTOS_TaskWait(unsigned int NoTicks,Task_ref* SelfTref)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	//Task should be blocked
	SelfTref->TimingWaiting.Blocking= enable; // that is mean that the time is enable and count
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimingWaiting.Ticks_Count=NoTicks;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
	//it should be suspend
	SelfTref->TaskState=suspend;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_TerminateTask); // terminate task that is mean it is suspend and blocking because it should to be terminated to be in suspend mode
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff ffc6 	bl	80009ec <MYRTOS_OS_SVC_Set>
	// and it will be treated as an activated that is mean it will be scheduled in update schedule tasks function



}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MYRTOS_STARTOS>:


void MYRTOS_STARTOS()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	OS_Control.OSMode_ID=OSrunning;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MYRTOS_STARTOS+0x50>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//set Default "Current Task" = Idle Task
	OS_Control.CurrentTask=&IDLE_Task;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MYRTOS_STARTOS+0x50>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <MYRTOS_STARTOS+0x54>)
 8000a78:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//Activate IDLE Task
	MYRTOS_ActivateTask(&IDLE_Task);
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <MYRTOS_STARTOS+0x54>)
 8000a7e:	f7ff ffcd 	bl	8000a1c <MYRTOS_ActivateTask>

	//start the ticker
	start_ticker();
 8000a82:	f7ff fbf9 	bl	8000278 <start_ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MYRTOS_STARTOS+0x50>)
 8000a88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f380 8809 	msr	PSP, r0

	//switch thread mode sp from MSP to PSP
	OS_SHADOW_SP_TO_PSP;
 8000a94:	f3ef 8114 	mrs	r1, CONTROL
 8000a98:	f041 0102 	orr.w	r1, r1, #2
 8000a9c:	f381 8814 	msr	CONTROL, r1
	OS_SWITCH_to_unprivileged;
 8000aa0:	f3ef 8314 	mrs	r3, CONTROL
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	f383 8814 	msr	CONTROL, r3
	IDLE_Task.P_TaskEntry();
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MYRTOS_STARTOS+0x54>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	4798      	blx	r3
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000068 	.word	0x20000068
 8000abc:	20000024 	.word	0x20000024

08000ac0 <MYRTOS_Uptade_TasksWaitingTime>:



void MYRTOS_Uptade_TasksWaitingTime()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	for (int i=0; i<OS_Control.No_Of_Active_Tasks;i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	e031      	b.n	8000b30 <MYRTOS_Uptade_TasksWaitingTime+0x70>
	{
		if(OS_Control.OSTasks[i]->TaskState==suspend) // it is blocking until meet the time
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d126      	bne.n	8000b2a <MYRTOS_Uptade_TasksWaitingTime+0x6a>
		{
			if (OS_Control.OSTasks[i]->TimingWaiting.Blocking==enable)
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11e      	bne.n	8000b2a <MYRTOS_Uptade_TasksWaitingTime+0x6a>
			{

				OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count--;
 8000aec:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	3a01      	subs	r2, #1
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count==1)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d110      	bne.n	8000b2a <MYRTOS_Uptade_TasksWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimingWaiting.Blocking=disable; // the time out and and the time waiting will be disable
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState=Waiting;				  // then the task should be in waiting state to can be scheduled that is important to can be ready in QUEUE
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	2202      	movs	r2, #2
 8000b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff ff61 	bl	80009ec <MYRTOS_OS_SVC_Set>
	for (int i=0; i<OS_Control.No_Of_Active_Tasks;i++)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <MYRTOS_Uptade_TasksWaitingTime+0x84>)
 8000b32:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8c7      	bhi.n	8000acc <MYRTOS_Uptade_TasksWaitingTime+0xc>
			}

		}
	}

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000068 	.word	0x20000068

08000b48 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <EXTI0_IRQHandler+0x1c>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <EXTI0_IRQHandler+0x1c>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <EXTI0_IRQHandler+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4798      	blx	r3

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010400 	.word	0x40010400
 8000b68:	200003bc 	.word	0x200003bc

08000b6c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <EXTI1_IRQHandler+0x1c>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <EXTI1_IRQHandler+0x1c>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <EXTI1_IRQHandler+0x20>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4798      	blx	r3

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010400 	.word	0x40010400
 8000b8c:	200003bc 	.word	0x200003bc

08000b90 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <EXTI2_IRQHandler+0x1c>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <EXTI2_IRQHandler+0x1c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <EXTI2_IRQHandler+0x20>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4798      	blx	r3
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010400 	.word	0x40010400
 8000bb0:	200003bc 	.word	0x200003bc

08000bb4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <EXTI3_IRQHandler+0x1c>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <EXTI3_IRQHandler+0x1c>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <EXTI3_IRQHandler+0x20>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4798      	blx	r3
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40010400 	.word	0x40010400
 8000bd4:	200003bc 	.word	0x200003bc

08000bd8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <EXTI4_IRQHandler+0x1c>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <EXTI4_IRQHandler+0x1c>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <EXTI4_IRQHandler+0x20>)
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	4798      	blx	r3
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010400 	.word	0x40010400
 8000bf8:	200003bc 	.word	0x200003bc

08000bfc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <EXTI9_5_IRQHandler+0x22>
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6153      	str	r3, [r2, #20]
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <EXTI9_5_IRQHandler+0xa4>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <EXTI9_5_IRQHandler+0x40>
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <EXTI9_5_IRQHandler+0xa4>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <EXTI9_5_IRQHandler+0x5e>
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c52:	6153      	str	r3, [r2, #20]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <EXTI9_5_IRQHandler+0xa4>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d008      	beq.n	8000c78 <EXTI9_5_IRQHandler+0x7c>
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <EXTI9_5_IRQHandler+0xa4>)
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d008      	beq.n	8000c96 <EXTI9_5_IRQHandler+0x9a>
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <EXTI9_5_IRQHandler+0xa0>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6153      	str	r3, [r2, #20]
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <EXTI9_5_IRQHandler+0xa4>)
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	4798      	blx	r3

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010400 	.word	0x40010400
 8000ca0:	200003bc 	.word	0x200003bc

08000ca4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <EXTI15_10_IRQHandler+0x18>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <EXTI15_10_IRQHandler+0x18>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6153      	str	r3, [r2, #20]

}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <task1>:
Task_ref Task1,Task2,Task3,Task4;
unsigned char Task1LED,Task2LED,Task3LED,Task4LED;


void task1()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)

	{
		Task1LED ^=1;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <task1+0x3c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <task1+0x3c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		// code of task 1
		count++;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <task1+0x40>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <task1+0x40>)
 8000cda:	6013      	str	r3, [r2, #0]
				if(count==30)
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <task1+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b1e      	cmp	r3, #30
 8000ce2:	d105      	bne.n	8000cf0 <task1+0x30>
				{
				  MYRTOS_ActivateTask(&Task4);
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <task1+0x44>)
 8000ce6:	f7ff fe99 	bl	8000a1c <MYRTOS_ActivateTask>
				  count=0;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <task1+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
				}

		MYRTOS_TaskWait(100,&Task1);
 8000cf0:	4905      	ldr	r1, [pc, #20]	; (8000d08 <task1+0x48>)
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f7ff fea1 	bl	8000a3a <MYRTOS_TaskWait>
		Task1LED ^=1;
 8000cf8:	e7e4      	b.n	8000cc4 <task1+0x4>
 8000cfa:	bf00      	nop
 8000cfc:	200004d0 	.word	0x200004d0
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	200003f8 	.word	0x200003f8
 8000d08:	2000043c 	.word	0x2000043c

08000d0c <task2>:
	}
}

void task2()

{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2LED ^=1;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <task2+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f083 0301 	eor.w	r3, r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <task2+0x20>)
 8000d1c:	701a      	strb	r2, [r3, #0]
		// code of task 2

		MYRTOS_TaskWait(300,&Task2);
 8000d1e:	4904      	ldr	r1, [pc, #16]	; (8000d30 <task2+0x24>)
 8000d20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d24:	f7ff fe89 	bl	8000a3a <MYRTOS_TaskWait>
		Task2LED ^=1;
 8000d28:	e7f2      	b.n	8000d10 <task2+0x4>
 8000d2a:	bf00      	nop
 8000d2c:	20000488 	.word	0x20000488
 8000d30:	200004d4 	.word	0x200004d4

08000d34 <task3>:

	}
}

void task3()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3LED ^=1;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <task3+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <task3+0x20>)
 8000d44:	701a      	strb	r2, [r3, #0]
		// code of task 3
		MYRTOS_TaskWait(500,&Task3);
 8000d46:	4904      	ldr	r1, [pc, #16]	; (8000d58 <task3+0x24>)
 8000d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4c:	f7ff fe75 	bl	8000a3a <MYRTOS_TaskWait>
		Task3LED ^=1;
 8000d50:	e7f2      	b.n	8000d38 <task3+0x4>
 8000d52:	bf00      	nop
 8000d54:	20000518 	.word	0x20000518
 8000d58:	2000048c 	.word	0x2000048c

08000d5c <task4>:

	}
}

void task4()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)

	{
		Task4LED ^=1;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <task4+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f083 0301 	eor.w	r3, r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <task4+0x20>)
 8000d6c:	701a      	strb	r2, [r3, #0]
		// code of task 1

		MYRTOS_TaskWait(1000,&Task4);
 8000d6e:	4904      	ldr	r1, [pc, #16]	; (8000d80 <task4+0x24>)
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f7ff fe61 	bl	8000a3a <MYRTOS_TaskWait>
		Task4LED ^=1;
 8000d78:	e7f2      	b.n	8000d60 <task4+0x4>
 8000d7a:	bf00      	nop
 8000d7c:	20000480 	.word	0x20000480
 8000d80:	200003f8 	.word	0x200003f8

08000d84 <main>:

unsigned int state_error;

int main(void)

{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

	MYRTOS_ErrorID error;
	//HW_init (initialize clockTree, RestController)

	HW_init();
 8000d8a:	f7ff fa5d 	bl	8000248 <HW_init>

	state_error	 = MYRTOS_init();
 8000d8e:	f7ff fd71 	bl	8000874 <MYRTOS_init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <main+0x120>)
 8000d98:	601a      	str	r2, [r3, #0]

	if (state_error != NOERROR)
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <main+0x120>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d000      	beq.n	8000da4 <main+0x20>
		while (1);
 8000da2:	e7fe      	b.n	8000da2 <main+0x1e>


	Task1.Stack_Size=1024;
 8000da4:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <main+0x124>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000daa:	601a      	str	r2, [r3, #0]
	Task1.P_TaskEntry=task1;
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <main+0x124>)
 8000dae:	4a3f      	ldr	r2, [pc, #252]	; (8000eac <main+0x128>)
 8000db0:	609a      	str	r2, [r3, #8]
	Task1.priority=3;
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <main+0x124>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	605a      	str	r2, [r3, #4]
	strcpy(Task1.TaskName,"task_1");
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <main+0x12c>)
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <main+0x130>)
 8000dbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc0:	6018      	str	r0, [r3, #0]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	8019      	strh	r1, [r3, #0]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	0c0a      	lsrs	r2, r1, #16
 8000dca:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size=1024;
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <main+0x134>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd2:	601a      	str	r2, [r3, #0]
	Task2.P_TaskEntry=task2;
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <main+0x134>)
 8000dd6:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <main+0x138>)
 8000dd8:	609a      	str	r2, [r3, #8]
	Task2.priority=3;
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <main+0x134>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	605a      	str	r2, [r3, #4]
	strcpy(Task2.TaskName,"task_2");
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <main+0x13c>)
 8000de2:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <main+0x140>)
 8000de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de8:	6018      	str	r0, [r3, #0]
 8000dea:	3304      	adds	r3, #4
 8000dec:	8019      	strh	r1, [r3, #0]
 8000dee:	3302      	adds	r3, #2
 8000df0:	0c0a      	lsrs	r2, r1, #16
 8000df2:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size=1024;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <main+0x144>)
 8000df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfa:	601a      	str	r2, [r3, #0]
	Task3.P_TaskEntry=task3;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <main+0x144>)
 8000dfe:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <main+0x148>)
 8000e00:	609a      	str	r2, [r3, #8]
	Task3.priority=3;
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <main+0x144>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	605a      	str	r2, [r3, #4]
	strcpy(Task3.TaskName,"task_3");
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <main+0x14c>)
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <main+0x150>)
 8000e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e10:	6018      	str	r0, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	8019      	strh	r1, [r3, #0]
 8000e16:	3302      	adds	r3, #2
 8000e18:	0c0a      	lsrs	r2, r1, #16
 8000e1a:	701a      	strb	r2, [r3, #0]

	Task4.Stack_Size=1024;
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <main+0x154>)
 8000e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e22:	601a      	str	r2, [r3, #0]
	Task4.P_TaskEntry=task4;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <main+0x154>)
 8000e26:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <main+0x158>)
 8000e28:	609a      	str	r2, [r3, #8]
	Task4.priority=1;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <main+0x154>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
	strcpy(Task4.TaskName,"task_4");
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <main+0x15c>)
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <main+0x160>)
 8000e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e38:	6018      	str	r0, [r3, #0]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	8019      	strh	r1, [r3, #0]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	0c0a      	lsrs	r2, r1, #16
 8000e42:	701a      	strb	r2, [r3, #0]

	error+= MYRTOS_CreatTask(&Task1);
 8000e44:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <main+0x124>)
 8000e46:	f7ff fd93 	bl	8000970 <MYRTOS_CreatTask>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4413      	add	r3, r2
 8000e52:	71fb      	strb	r3, [r7, #7]
	error+= MYRTOS_CreatTask(&Task2);
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <main+0x134>)
 8000e56:	f7ff fd8b 	bl	8000970 <MYRTOS_CreatTask>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4413      	add	r3, r2
 8000e62:	71fb      	strb	r3, [r7, #7]
	error+= MYRTOS_CreatTask(&Task3);
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <main+0x144>)
 8000e66:	f7ff fd83 	bl	8000970 <MYRTOS_CreatTask>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4413      	add	r3, r2
 8000e72:	71fb      	strb	r3, [r7, #7]
	error+= MYRTOS_CreatTask(&Task4);
 8000e74:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <main+0x154>)
 8000e76:	f7ff fd7b 	bl	8000970 <MYRTOS_CreatTask>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4413      	add	r3, r2
 8000e82:	71fb      	strb	r3, [r7, #7]

	// mean that will arrange in queue table and get it ready
	MYRTOS_ActivateTask(&Task1);
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <main+0x124>)
 8000e86:	f7ff fdc9 	bl	8000a1c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <main+0x134>)
 8000e8c:	f7ff fdc6 	bl	8000a1c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task3);
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <main+0x144>)
 8000e92:	f7ff fdc3 	bl	8000a1c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task4);
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <main+0x154>)
 8000e98:	f7ff fdc0 	bl	8000a1c <MYRTOS_ActivateTask>


	MYRTOS_STARTOS(); // there is an activation for idle Task inside this function and make the current task is idle task also
 8000e9c:	f7ff fde4 	bl	8000a68 <MYRTOS_STARTOS>

	while(1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x11c>
 8000ea2:	bf00      	nop
 8000ea4:	20000484 	.word	0x20000484
 8000ea8:	2000043c 	.word	0x2000043c
 8000eac:	08000cc1 	.word	0x08000cc1
 8000eb0:	20000458 	.word	0x20000458
 8000eb4:	08000fa8 	.word	0x08000fa8
 8000eb8:	200004d4 	.word	0x200004d4
 8000ebc:	08000d0d 	.word	0x08000d0d
 8000ec0:	200004f0 	.word	0x200004f0
 8000ec4:	08000fb0 	.word	0x08000fb0
 8000ec8:	2000048c 	.word	0x2000048c
 8000ecc:	08000d35 	.word	0x08000d35
 8000ed0:	200004a8 	.word	0x200004a8
 8000ed4:	08000fb8 	.word	0x08000fb8
 8000ed8:	200003f8 	.word	0x200003f8
 8000edc:	08000d5d 	.word	0x08000d5d
 8000ee0:	20000414 	.word	0x20000414
 8000ee4:	08000fc0 	.word	0x08000fc0

08000ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f16:	f000 f811 	bl	8000f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1a:	f7ff ff33 	bl	8000d84 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   r0, =_estack
 8000f20:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f2c:	08000fd0 	.word	0x08000fd0
  ldr r2, =_sbss
 8000f30:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f34:	2000051c 	.word	0x2000051c

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <__libc_init_array>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	2500      	movs	r5, #0
 8000f40:	4e0c      	ldr	r6, [pc, #48]	; (8000f74 <__libc_init_array+0x38>)
 8000f42:	4c0d      	ldr	r4, [pc, #52]	; (8000f78 <__libc_init_array+0x3c>)
 8000f44:	1ba4      	subs	r4, r4, r6
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	42a5      	cmp	r5, r4
 8000f4a:	d109      	bne.n	8000f60 <__libc_init_array+0x24>
 8000f4c:	f000 f81a 	bl	8000f84 <_init>
 8000f50:	2500      	movs	r5, #0
 8000f52:	4e0a      	ldr	r6, [pc, #40]	; (8000f7c <__libc_init_array+0x40>)
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <__libc_init_array+0x44>)
 8000f56:	1ba4      	subs	r4, r4, r6
 8000f58:	10a4      	asrs	r4, r4, #2
 8000f5a:	42a5      	cmp	r5, r4
 8000f5c:	d105      	bne.n	8000f6a <__libc_init_array+0x2e>
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f64:	4798      	blx	r3
 8000f66:	3501      	adds	r5, #1
 8000f68:	e7ee      	b.n	8000f48 <__libc_init_array+0xc>
 8000f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f6e:	4798      	blx	r3
 8000f70:	3501      	adds	r5, #1
 8000f72:	e7f2      	b.n	8000f5a <__libc_init_array+0x1e>
 8000f74:	08000fc8 	.word	0x08000fc8
 8000f78:	08000fc8 	.word	0x08000fc8
 8000f7c:	08000fc8 	.word	0x08000fc8
 8000f80:	08000fcc 	.word	0x08000fcc

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
